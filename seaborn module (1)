#Seaborn is a Python data visualization library based on matplotlib. 
#It provides a high-level interface for drawing attractive and informative statistical graphics.
import seaborn as sns
#One difference between seaborn and regular matplotlib plotting is that you can pass pandas DataFrames directly 
#to the plot and refer to each column by name. For example, if you were to plot the column 'price' vs the column 'area'
#from a DataFrame df, you could call 
sns.lmplot(x='area', y='price', data=df)

# Plot a linear regression between 'weight' and 'hp'
sns.lmplot(x = 'weight', y ='hp', data=auto)

# Display the plot
plt.show()

#Often, you don't just want to see the regression itself but also see the residuals to get a better idea how well 
#the regression captured the data. Seaborn provides sns.residplot() for that purpose, visualizing how far datapoints diverge 
#from the regression line.

# Generate a green residual plot of the regression between 'hp' and 'mpg'
sns.residplot(x='hp', y='mpg', data=auto, color='green')

# Display the plot
plt.show()

#When there are more complex relationships between two variables, a simple first order regression is often not sufficient to 
accurately capture the relationship between the variables. Seaborn makes it simple to compute and visualize regressions of varying orders.

#the function sns.lmplot() is a higher-level interface to sns.regplot()

#A principal difference between sns.lmplot() and sns.regplot() is the way in which matplotlib options are passed 
#(sns.regplot() is more permissive).

#For both sns.lmplot() and sns.regplot(), the keyword order is used to control the order of polynomial regression.

#The function sns.regplot() uses the argument scatter=None to prevent plotting the scatter plot points again.

# Generate a scatter plot of 'weight' and 'mpg' using red circles
plt.scatter(auto['weight'], auto['mpg'], label='data', color='red', marker='o')

# Plot in blue a linear regression of order 1 between 'weight' and 'mpg'
sns.regplot(x='weight', y='mpg', data=auto, color='blue', scatter=None, label='order 1')

# Plot in green a linear regression of order 2 between 'weight' and 'mpg'
sns.regplot(x='weight', y='mpg', data=auto, color='green', scatter=None, label='order 2', order = 2)


# Add a legend and display the plot
plt.legend(loc = 'upper right')
plt.show()

#Seaborn makes it possible to apply linear regressions separately for subsets of the data by applying a groupby operation. 
#Using the hue argument, you can specify a categorical variable by which to group data observations. 
#The distinct groups of points are used to produce distinct regressions with different hues in the plot.

# Plot a linear regression between 'weight' and 'hp', with a hue of 'origin' and palette of 'Set1'
sns.lmplot(x = 'weight', y = 'hp', data = auto, hue = 'origin', palette = 'Set1')

# Display the plot
plt.show()

#The sns.lmplot() accepts the arguments row and/or col to arrangements of subplots for regressions.
# Plot linear regressions between 'weight' and 'hp' grouped row-wise by 'origin'
sns.lmplot(x = 'weight', y = 'hp', data = auto, row = 'origin')

# Display the plot
plt.show()

#Often we want to explore how the distribution of a single continuous variable is affected by a second categorical variable. 
#Seaborn provides a variety of plot types to perform these types of comparisons between univariate distributions.
The strip plot is one way of visualizing this kind of data. It plots the distribution of variables for each category as individual datapoints. For vertical strip plots (the default), distributions of continuous values are laid out parallel to the y-axis and the distinct categories are spaced out along the x-axis.

#For example, sns.stripplot(x='type', y='length', data=df) produces a sequence of vertical strip plots of length distributions grouped by 
#type (assuming length is a continuous column and type is a categorical column of the DataFrame df).
#Overlapping points can be difficult to distinguish in strip plots. The argument jitter=True helps spread out overlapping points.
#Other matplotlib arguments can be passed to sns.stripplot(), e.g., marker, color, size, etc.

# Make a strip plot of 'hp' grouped by 'cyl'
plt.subplot(2,1,1)
sns.stripplot(x='cyl', y='hp', data=auto)

# Make the strip plot again using jitter and a smaller point size
plt.subplot(2,1,2)
sns.stripplot(x = 'cyl', y='hp', data = auto, jitter = True, size = 3)

# Display the plot
plt.show()

#As you have seen, a strip plot can be visually crowded even with jitter applied and smaller point sizes.
#An alternative is provided by the swarm plot (sns.swarmplot()), which is very similar but spreads out the points to avoid 
#overlap and provides a better visual overview of the data.

#The syntax for sns.swarmplot() is similar to that of sns.stripplot(), e.g., sns.swarmplot(x='type', y='length', data=df).
#The orientation for the continuous variable in the strip/swarm plot can be inferred from the choice of the columns x and y from 
#the DataFrame data. The orientation can be set explicitly using orient='h' (horizontal) or orient='v' (vertical).
#Another grouping can be added in using the hue keyword. For instance, 
#using sns.swarmplot(x='type', y='length', data=df, hue='build year') makes a swarm plot from the DataFrame df with 
#the 'length' column values spread out vertically, horizontally grouped by the column 'type' and each point colored by 
#the categorical column 'build year'.

# Generate a swarm plot of 'hp' grouped horizontally by 'cyl'  
plt.subplot(2,1,1)
sns.swarmplot(x='cyl', y='hp', data = auto, orient = 'h')

# Generate a swarm plot of 'hp' grouped vertically by 'cyl' with a hue of 'origin'
plt.subplot(2,1,2)
sns.swarmplot(x='hp', y= 'cyl', data = auto, hue = 'origin', orient = 'h')

# Display the plot
plt.show()

## Generate a swarm plot of 'hp' grouped horizontally by 'cyl'  
plt.subplot(2,1,1)
sns.swarmplot(x='cyl', y='hp', data = auto, orient = 'h')

# Generate a swarm plot of 'hp' grouped vertically by 'cyl' with a hue of 'origin'
plt.subplot(2,1,2)
sns.swarmplot(x='hp', y= 'cyl', data = auto, hue = 'origin', orient = 'h')

# Display the plot
plt.show()

Both strip and swarm plots visualize all the datapoints. For large datasets, this can result in significant overplotting. 
Therefore, it is often useful to use plot types which reduce a dataset to more descriptive statistics and provide a good summary 
of the data. Box and whisker plots are a classic way of summarizing univariate distributions but seaborn provides a more sophisticated 
extension of the standard box plot, called a violin plot.

Here, you will produce violin plots of the distribution of horse power ('hp') by the number of cylinders ('cyl'). 
Additionally, you will combine two different plot types by overlaying a strip plot on the violin plot.

As before, the DataFrame has been pre-loaded for you as auto.

# Generate a violin plot of 'hp' grouped horizontally by 'cyl'
plt.subplot(2,1,1)
sns.violinplot(x='cyl', y='hp', data=auto)

# Generate the same violin plot again with a color of 'lightgray' and without inner annotations
plt.subplot(2,1,2)
sns.violinplot(x = 'cyl', y = 'hp', data=auto, inner = None, color = 'lightgray')

# Overlay a strip plot on the violin plot
sns.stripplot(x = 'cyl', y = 'hp', data = auto, jitter = True, size = 1.5)

# Display the plot
plt.show()

Seaborn's sns.jointplot() provides means of visualizing bivariate distributions. The basic calling syntax is similar to that of sns.lmplot(). By default, calling sns.jointplot(x, y, data) renders a few things:

A scatter plot using the specified columns x and y from the DataFrame data.
A (univariate) histogram along the top of the scatter plot showing distribution of the column x.
A (univariate) histogram along the right of the scatter plot showing distribution of the column y.

# Generate a joint plot of 'hp' and 'mpg'
sns.jointplot(x = 'hp', y = 'mpg', data = auto)

# Display the plot
plt.show()

The seaborn function sns.jointplot() has a parameter kind to specify how to visualize the joint variation of two continuous random variables (i.e., two columns of a DataFrame)

kind='scatter' uses a scatter plot of the data points
kind='reg' uses a regression plot (default order 1)
kind='resid' uses a residual plot
kind='kde' uses a kernel density estimate of the joint distribution
kind='hex' uses a hexbin plot of the joint distribution


The function sns.pairplot() constructs a grid of all joint plots pairwise from all pairs of (non-categorical) columns in a DataFrame. 
The syntax is very simple: sns.pairplot(df), where df is a DataFrame. The non-categorical columns are identified and the corresponding 
joint plots are plotted in a square grid of subplots. The diagonal of the subplot grid shows the univariate histograms of the individual
columns.

# Print the first 5 rows of the DataFrame
print(auto.head())

# Plot the pairwise joint distributions from the DataFrame 
sns.pairplot(auto)

# Display the plot
plt.show()

# Print the first 5 rows of the DataFrame
print(auto.head())

# Plot the pairwise joint distributions grouped by 'origin' along with regression lines
sns.pairplot(auto, kind = 'reg', hue = 'origin')

# Display the plot
plt.show()

Plotting relationships between many variables using a pair plot can quickly get visually overwhelming. 
It is therefore often useful to compute covariances between the variables instead. The covariance matrix can then easily be visualized 
as a heatmap. A heatmap is effectively a pseudocolor plot with labelled rows and columns (i.e., a pseudocolor plot based on a pandas 
DataFrame rather than a matrix). The DataFrame does not have to be square or symmetric (but, in the context of a covariance matrix, 
it is both).
# Print the covariance matrix
print(cov_matrix)

# Visualize the covariance matrix using a heatmap
sns.heatmap(cov_matrix)

# Display the heatmap
plt.show()
